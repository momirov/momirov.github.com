<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on Vladimir Momirov</title>
    <link>http://blog.vladimirm.com/post/index.xml</link>
    <description>Recent content in Post-rsses on Vladimir Momirov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 23 Nov 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.vladimirm.com/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Basic postgresql benchmarking in 10 minutes with pgbench</title>
      <link>http://blog.vladimirm.com/2013/11/basic-postgresql-benchmarking-in-10-minutes-with-pgbench/</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.vladimirm.com/2013/11/basic-postgresql-benchmarking-in-10-minutes-with-pgbench/</guid>
      <description>

&lt;h2 id=&#34;why-benchmark&#34;&gt;Why benchmark?&lt;/h2&gt;

&lt;p&gt;Benchmark can be used beforehand to uncover hidden problems. Maybe I forgot to increase
connection limit of 100 for a server that is expecting high load, maybe there is not
enough resources to handle that many clients, etc, you get the picture.&lt;/p&gt;

&lt;h2 id=&#34;why-pgbench&#34;&gt;Why pgbench?&lt;/h2&gt;

&lt;p&gt;For me there are two things: it is fast to setup, it is simple to use. You can checkout
&lt;a href=&#34;http://www.postgresql.org/docs/9.1/static/pgbench.html&#34;&gt;pgbench page&lt;/a&gt; on
postgresql.org for all options and how it exactly works.&lt;/p&gt;

&lt;h2 id=&#34;the-benchmark&#34;&gt;The benchmark&lt;/h2&gt;

&lt;p&gt;For this benchmark I used 2 droplets on
&lt;a href=&#34;https://www.digitalocean.com/?refcode=92eab3d251a3&#34;&gt;Digital Ocean (refferal link)&lt;/a&gt;,
8gb for the server and 2gb for a client. Both droplets are running Ubuntu 13.04 and
postgresql 9.1 is installed from repos. Pgbench tables where initialized with scale
factor 1000 because we will run the benchmark with max 1000 simultaneous connections.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pgbench -i -s 1000

 schemaname |     relname      | n_live_tup
------------+------------------+------------
 public     | pgbench_accounts |  100000000
 public     | pgbench_tellers  |      10000
 public     | pgbench_branches |       1000
 public     | pgbench_history  |          0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Default configuration results:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pgbench -c 10 -T 60&lt;/code&gt;&lt;/p&gt;

&lt;div&gt;
    &lt;canvas id=&#34;before&#34; width=&#34;950&#34; height=&#34;300&#34;&gt;&lt;/canvas&gt;
    
    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;http://blog.vladimirm.com/js/beforeChart.js&#34;&gt;&lt;/script&gt;
    
&lt;/div&gt;


&lt;p&gt;Shown on Y axis is number of successful connections in 60 seconds, on the X axis client number. Chart shows us that we hit a limit of 100 concurent connections and
also sweet spot for current configuration is around 50 concurrent connections. For the sake of benchmark we raised Postgresql connection limit to 1000. We didn&amp;rsquo;t do any other tweaks.&lt;/p&gt;

&lt;div&gt;
    &lt;canvas id=&#34;after&#34; width=&#34;950&#34; height=&#34;300&#34;&gt;&lt;/canvas&gt;
    
    &lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.3.0/Chart.js&#34;&gt;&lt;/script&gt;
    &lt;script src=&#34;http://blog.vladimirm.com/js/afterChart.js&#34;&gt;&lt;/script&gt;
    
&lt;/div&gt;


&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Benchmarking Postgresql is vital before deploying your app. It can uncover obvious problems. Please do this, it doesn&amp;rsquo;t take much time.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Export files from MongoDB GridFS with directory paths</title>
      <link>http://blog.vladimirm.com/2011/06/export-files-from-mongodb-gridfs-with-directory-paths/</link>
      <pubDate>Sat, 04 Jun 2011 08:18:40 +0000</pubDate>
      
      <guid>http://blog.vladimirm.com/2011/06/export-files-from-mongodb-gridfs-with-directory-paths/</guid>
      <description>&lt;p&gt;MongoDB and GridFS are awesome, but I had to migrate some data to
MySQL database. The biggest problem is that I used GridFS to store
uploaded files. After unsuccessfully  searching online I decided to
write my own bash export script. How to export all the files out of
mongodb gridfs? Here&amp;rsquo;s the script:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#! /bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;_host&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;1:?Usage: gridfs host db&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;_db&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;2:?Usage: gridfs host db&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;read&lt;/span&gt; -r line&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;do&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$line&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk -F&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\t&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{ print $1 }&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;connected to&amp;#39;&lt;/span&gt;* &lt;span style=&#34;color: #f92672&#34;&gt;]]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;continue&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;directory&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;file%/*&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;
    mkdir -p &lt;span style=&#34;color: #f8f8f2&#34;&gt;$directory&lt;/span&gt;
    mongofiles -h &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_host&lt;/span&gt; -db &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_db&lt;/span&gt; get &lt;span style=&#34;color: #f8f8f2&#34;&gt;$file&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;done&lt;/span&gt; &amp;lt; &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;mongofiles -h &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_host&lt;/span&gt; -db &lt;span style=&#34;color: #f8f8f2&#34;&gt;$_db&lt;/span&gt; list&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Script takes two parameters, first one is the hostname of the
mongodb instance and the second is database.&lt;/p&gt;

&lt;p&gt;For example: &lt;code&gt;./gridfs localhost scen&lt;/code&gt; will export all files
from scen database on localhost to current directory, if you have
directory structure in GridFS, it will create that directories too.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache-like Nginx vhost layout</title>
      <link>http://blog.vladimirm.com/2011/05/apache-like-nginx-vhost-layout/</link>
      <pubDate>Wed, 11 May 2011 14:16:36 +0000</pubDate>
      
      <guid>http://blog.vladimirm.com/2011/05/apache-like-nginx-vhost-layout/</guid>
      <description>&lt;p&gt;I love how apache vhost files are organized under Debian. We have
two directories, one with all available sites (sites-available) and
one with enabled sites (sites-enabled), enabled sites are just a
symlink to conf file in sites-available directory. So if we want to
enable one site just symlink it to sites-enabled directory and
reload nginx, also when we need to disable a site we only delete
the symlink for that vhost from sites-enabled. Because we only
deleted symlink conf file remains if we want to enable that site
again. All commands below are executed with root privileges! First
thing first, we need to create directories for our config files, go
into nginx conf directory (for me /opt/nginx/conf) and execute:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir sites-available sites-enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now open nginx.conf in your favourite editor. You will get
something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user nginx www;
worker_processes  3;
events {
    worker_connections  1024;
}

http {
    passenger_max_pool_size 4;
    passenger_pool_idle_time 3000;
    passenger_max_instances_per_app 2;
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;
    gzip  on;
    client_max_body_size 200M;

    server {
        listen       80;
        server_name  localhost;
        location / {
            root   html;
            index  index.html index.htm;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the server section? Thats one virtual host and we want to
extract it into separate vhost file. Cut and paste that section to
a new file inside sites-available and name it localhost. Contents
of a localhost file should be:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen       80;
    server_name  localhost;
    location / {
        root   html;
        index  index.html index.htm;
    }
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   html;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In nginx.conf file instead of server section that we cutted we have
to include out sites-enabled directory. We can do that with
&amp;ldquo;include sites-enabled/*;&amp;rdquo; line, and at the end nginx.cong should
look like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;user nginx www;
worker_processes  3;
events {
    worker_connections  1024;
}

http {
    passenger_max_pool_size 4;
    passenger_pool_idle_time 3000;
    passenger_max_instances_per_app 2;
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    server_tokens off;
    gzip  on;
    client_max_body_size 200M;

    include sites-enabled/*;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We just need to do two things, symlink localhost file from
sites-available to sites-enabled and reload nginx conf.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s sites-available/localhost sites-enabled/localhost
/etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We are done with the setup, when you have the need to add another
site you just add another file to sites-available directory, I for
example have www.vladimirm.com file witch contains:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;server {
    listen   80;
    server_name www.vladimirm.com vladimirm.com;
    gzip on;
    gzip_http_version 1.1;
    gzip_comp_level 2;
    gzip_types    text/plain text/css
                  application/x-javascript text/xml
                  application/xml application/xml+rss
                  text/javascript;

    location / {
        index  index.html index.htm index.php;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And I just symlink it and reload nginx:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s sites-available/www.vladimirm.com sites-enabled/www.vladimirm.com
/etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If I need to disable www.vladimirm.com i just delete symlink to it
from sites-enabled and reload nginx.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rm sites-enabled/www.vladimirm.com
/etc/init.d/nginx reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That way we don&amp;rsquo;t loose the config file if we have to re enable the
site.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Quickly enable gzip compression on Nginx</title>
      <link>http://blog.vladimirm.com/2010/09/quickly-enable-gzip-compression-on-nginx/</link>
      <pubDate>Thu, 16 Sep 2010 17:58:59 +0000</pubDate>
      
      <guid>http://blog.vladimirm.com/2010/09/quickly-enable-gzip-compression-on-nginx/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve noticed today that css and javascript files are not getting
gziped on my Nginx server. Gzip was turned on and it was working
for html files but we have to tell nginx what additional content we
need gziped
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;gzip&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;on&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;gzip_http_version&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;.1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;gzip_comp_level&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# compression level, from 1-9, 9 = max&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;gzip_types&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;text/plain&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;text/css&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;application/x-javascript&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;text/xml&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;application/xml&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;application/xml+rss&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;text/javascript&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Just paste this code in http section of the nginx.conf file and
you&amp;rsquo;re done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Better sprintf: CakePHP String::insert</title>
      <link>http://blog.vladimirm.com/2010/09/better-sprintf-cakephp-stringinsert/</link>
      <pubDate>Thu, 16 Sep 2010 16:32:57 +0000</pubDate>
      
      <guid>http://blog.vladimirm.com/2010/09/better-sprintf-cakephp-stringinsert/</guid>
      <description>&lt;p&gt;Today I was re-factoring my code a bit and in some places decided
that string concatenation needs to go. Simple example:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;link&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Download&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Easy answer is sprintf:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;link&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Download&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;sprintf(&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/%s/%s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

But this isn&amp;rsquo;t very descriptive.
&lt;a href=&#34;http://api.cakephp.org/class/string#method-Stringinsert&#34;&gt;String::insert&lt;/a&gt;
does it the proper way:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;&amp;lt;?php&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$html&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;link&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Download&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;String&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;insert&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/:dir/:name&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dir&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;dir&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;name&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$material[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

Now that&amp;rsquo;s elegance.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>